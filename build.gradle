plugins {
  id "java"
  id "edu.wpi.first.GradleRIO" version "2024.1.1-beta-3"
}

java {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

deploy {
  targets {
    roborio(getTargetTypeClass('RoboRIO')) {
      team = project.frc.getTeamNumber()
      debug = project.frc.getDebugOrDefault(false)

      artifacts {
        frcJava(getArtifactTypeClass('FRCJavaArtifact')) {}
        frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
          files = project.fileTree('src/main/deploy')
          directory = '/home/lvuser/deploy'
        }
      }
    }
  }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

wpi.java.debugJni = false

def includeDesktopSupport = true

dependencies {
  implementation wpi.java.deps.wpilib()
  implementation wpi.java.vendor.java()

  FileCollection dtlibJar = files('lib/dtlib.jar')
  if (dtlibJar.getSingleFile().exists()) {
    implementation dtlibJar
  } else {
    implementation 'org.victorrobotics.dtlib:dtlib-java:2024.0.0-beta-1'
  }

  roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
  roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

  roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
  roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

  nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
  nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
  simulationDebug wpi.sim.enableDebug()

  nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
  nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
  simulationRelease wpi.sim.enableRelease()

  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
  useJUnitPlatform()
  systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

jar {
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
  from sourceSets.main.allSource
  manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
  duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

tasks.withType(JavaCompile) {
  options.compilerArgs.add '-XDstringConcat=inline'
}
